/*
 * To the extent possible under law, the ImageJ developers have waived
 * all copyright and related or neighboring rights to this tutorial code.
 *
 * See the CC0 1.0 Universal license for details:
 *     http://creativecommons.org/publicdomain/zero/1.0/
 */
package com.berdal84.mageek;


import ij.ImagePlus;
import ij.io.FileSaver;
import ij.plugin.ChannelSplitter;
import ij.plugin.ZProjector;
import ij.process.ImageProcessor;
import ij.process.LUT;
import java.awt.AWTEvent;
import net.imglib2.type.numeric.RealType;
import org.scijava.command.Command;
import org.scijava.plugin.Parameter;
import org.scijava.plugin.Plugin;
import org.scijava.log.LogLevel;
import org.scijava.log.LogService;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import loci.formats.FormatException;
import loci.plugins.in.DisplayHandler;
import loci.plugins.in.ImagePlusReader;
import loci.plugins.in.ImportProcess;
import loci.plugins.in.ImporterOptions;
import loci.plugins.in.ImporterPrompter;

/**
 * Command to process a set of file, runnable in a Thread.
 */
@Plugin(type = Command.class)
public class Process<T extends RealType<T>>  implements Command
{     
    /**
     * Interface to implement to listen this Process class
     */
    public interface Listener
    {
        /**
         * Emitted when process progress change
         * @param _progress integer [0-100]
         */
        public void onProgressChange(int _progress);
        
        /**
         * Emitted when status change
         * @param _status a message.
         */
        public void onStatusChange(String _status);
    }
    
    private LogService log;
    
    /* Files to process */
    private final ArrayList<File> files;
    
    /* Processed files */
    private final ArrayList<File> processedFiles;
    
    /* Ignored files */
    private final ArrayList<File> ignoredFiles;
    
    /* Batch mode, if true will process in background */
    private boolean batchMode;
    
    /* Process progress (0-100) */
    private int progress;
    
    /* Destination folder */
    private File destinationFolder;
    
    /* All images generated by the last run() */
    private final ArrayList<ImagePlus[]> allImages;
    
    /* Projection method for slices projection */
    private String projectorMethod;
    
    /* Color to use to apply a LUT to each individual channel */
    private ColorPreset colorPreset;

    /* Current status of the Process */
    private String status;

    /* Process listener (notified when progress, status, ... changes) */
    private Listener listener = null;
    
    public Process()
    {
        files = new ArrayList<>();
        processedFiles = new ArrayList<>();
        ignoredFiles = new ArrayList<>();
        allImages = new ArrayList<>();
    }

    private void init()
    {
        status = "";
        processedFiles.clear();
        ignoredFiles.clear();
        allImages.clear();
        progress = 0;
    }
    
    /**
     * Setup the process (before to call run())
     * @param _files
     * @param _destinationFolder
     * @param _batchMode
     * @param _zProjectorMethod
     * @param _colorPreset
     * @param _log
     */
    public void setup(
        ArrayList<File> _files,
        File _destinationFolder,
        boolean _batchMode,
        String _zProjectorMethod,
        ColorPreset _colorPreset,
        LogService _log
    )
    {
        init();
        files.addAll(_files);
        destinationFolder = _destinationFolder;
        batchMode = _batchMode;
        projectorMethod = _zProjectorMethod;
        colorPreset = _colorPreset;
        log = _log;
    }
    
    public String getStatus()
    {
        return status;
    }
    
    private void setProgress(int _progress)
    {
        progress = _progress;
        if( listener != null ) listener.onProgressChange(_progress);
    }
        
    private void setStatus(String _message)
    {
        status = _message;        
        if( listener != null )listener.onStatusChange(_message);
    }
    
    /**
     * Run the process, must be called after setup()
     */
    @Override
    public void run()
    {
        init();       
        setStatus("Processing ...");

        for (File file : files)
        {
            try
            {
                setStatus(String.format("Processing file %s ...", file.toPath()));
                ImagePlus[] allSeries = open(file);

                // In case we have zero images, we skip.
                if  ( allSeries.length > 0 )
                {
                   allImages.add(allSeries); 

                   // At this step, each image is a serie (@see open(File) method)
                   int serie = 0;
                   for(ImagePlus serieImg : allSeries )
                    {
                        ImagePlus[] allChannels = ChannelSplitter.split(serieImg);

                        // At this step, each image is a channel.
                        int channel = 0;
                        for (ImagePlus channelImg : allChannels)
                        {
                            if( !batchMode )
                            {
                                channelImg.show();
                            }

                            if ( channelImg.getNSlices() > 1 )
                            {
                                channelImg = ij.plugin.ZProjector.run(channelImg, projectorMethod );
                            }                                

                            ImageProcessor p     = channelImg.getProcessor();                                
                            java.awt.Color color = colorPreset.getColorAt(channel);

                            LUT lut = LUT.createLutFromColor(color);
                            p.setLut(lut);

                            String outputPath = String.format(
                                    "%s%s%s_serie_%d_channel_%d.tiff",
                                    destinationFolder.getAbsolutePath(),
                                    File.separator,
                                    file.getName(),
                                    serie,
                                    channel
                            );

                            ImagePlus out = new ImagePlus("out", p.createImage());

                            if( !batchMode )
                            {
                                channelImg.close();
                                out.show();
                            }

                            FileSaver saver = new FileSaver(out);
                            saver.saveAsTiff(outputPath);
                            channel++;


                            if( !batchMode )
                            {
                                out.close();

                            }
                        }
                        serie++;
                    }

                }                    
                setStatus( String.format("File %s processed.", file.toPath()));
            }
            catch (Exception ex)
            {
                ignoredFiles.add(file);
                Logger.getLogger(Plugin.class.getName()).log(Level.SEVERE, null, ex);
            }
            processedFiles.add(file);

            setProgress( (int)(((float)processedFiles.size() / (float)files.size()) * 100.f) );
        }
        
        String message = String.format(
                "Process done, %d file(s) processed (%d ignored)"
                + " --- Hasta la vista, baby. ^^",
                processedFiles.size(),
                ignoredFiles.size()
        );
        setStatus(message);    
    }

    /**
     * Open a microscope image file
     * @param file
     * @return an array ob images (one per series)
     * @throws IOException
     * @throws FormatException 
     */
    private ImagePlus[] open(File file) throws IOException, FormatException   
    {
  
        ImporterOptions options = new ImporterOptions();
        options.setId(file.getPath());  
        options.setOpenAllSeries(true);
        options.setSplitChannels(false);
        options.setWindowless(true);
        
        ImportProcess process = new ImportProcess(options);
        /*
         * @link {loci.plugins.in.Importer.showDialogs}
         * Goto to the source coe linked above to understand why we need this Prompter.
         */
        ImporterPrompter prompter = new ImporterPrompter(process);
                
        process.execute();

        log.debug("display metadata");
        DisplayHandler displayHandler = new DisplayHandler(process);
        displayHandler.displayOriginalMetadata();
        displayHandler.displayOMEXML();

        log.debug("read pixel data");
        ImagePlusReader reader = new ImagePlusReader(process);
        ImagePlus[] imps = reader.openImagePlus();

//        log.debug("display pixels");
//        displayHandler.displayImages(imps);
//
//        log.debug("display ROIs");
//        displayHandler.displayROIs(imps);   
        
        if (!process.getOptions().isVirtual())
        {
            process.getReader().close();
        }
        
        return imps;
    }
    
    public void setListener(Listener _listener)
    {
        listener = _listener;
    }
    
}
